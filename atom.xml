<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MINFIVE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.minfive.com/"/>
  <updated>2017-12-10T23:35:25.608Z</updated>
  <id>http://blog.minfive.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信视频 H5 开发小结</title>
    <link href="http://blog.minfive.com/2017/12/11/2017-12-11-wechat-video/"/>
    <id>http://blog.minfive.com/2017/12/11/2017-12-11-wechat-video/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2017-12-10T23:35:25.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近日，由于工作原因，需要开发一款视频类 h5。玩法很简单，用户滚页面至底部，切换全屏视频播放。<br>地址如下：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-12-11/0c05c64de7df694e1b4fa5ea99f3ddb8.png" alt="10-08"></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="全屏同层播放"><a href="#全屏同层播放" class="headerlink" title="全屏同层播放"></a>全屏同层播放</h4><p>为了满足交互需求，需要达到全屏同层播放，具体配置如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span></span></div><div class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"my-video"</span> </span></div><div class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"video/mp4"</span> <span class="attr">x5-video-player-fullscreen</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">    <span class="attr">webkit-playsinline</span></span></div><div class="line"><span class="tag">    <span class="attr">playsinline</span></span></div><div class="line"><span class="tag">    <span class="attr">x-webkit-airplay</span>=<span class="string">"allow"</span> <span class="attr">x5-video-player-type</span>=<span class="string">"h5"</span></span></div><div class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="视频预加载"><a href="#视频预加载" class="headerlink" title="视频预加载"></a>视频预加载</h4><p>由于该 H5 为视频类 H5 ，在移动端播放视频还是要考虑到加载速度及稳定播放等问题，因此笔者采用的是 “边播边加载” 的方式，利用 video 标签的 <code>canplaythrough</code> 事件作为页面加载完成的标志。</p><p>由于移动端原因， video 并不会主动去预加载用户未需求的资源，因此我们需要手动去触发 video 的预加载资源，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'my-video'</span>).play();</div></pre></td></tr></table></figure><p>这样就可以了吗？</p><p>不，万恶的微信限制了必须用户行为才能播放媒体资源，因此我们只能再祭出万能 hack：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</div><div class="line">    let video = document.getElementById(&apos;my-video&apos;);</div><div class="line"></div><div class="line">    function preload() &#123;</div><div class="line">        video.play();</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            video.pause();</div><div class="line">        &#125;, 200);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    document.addEventListener(&quot;WeixinJSBridgeReady&quot;,  preload, false);</div><div class="line">    if (typeof WeixinJSBridge == &quot;object&quot; &amp;&amp; typeof WeixinJSBridge.invoke == &quot;function&quot;) &#123;</div><div class="line">        WeixinJSBridge.invoke(&quot;getNetworkType&quot;, &#123;&#125;, preload);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    preload(); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="槽点"><a href="#槽点" class="headerlink" title="槽点"></a>槽点</h3><h4 id="布局限制"><a href="#布局限制" class="headerlink" title="布局限制"></a>布局限制</h4><p>安卓端由于无法像 ios 端完美的实现全屏播放，播放视频时手机依旧会进入媒体播放模式，这就导致了播放视频时会连带着媒体播放层的弹出，而媒体播放层则类似于 <code>position: fixed; top: 0; left: 0;</code> 的效果固定在页面顶部，每个媒体<br>播放层的弹出，都会预先将页面滚动至顶部，如果页面发生滚动，在安卓端播放视频就会出现短暂的黑屏。</p><p><strong>因此，微信视频类 H5 如果需要滚动存在，请采用局部滚动。</strong></p><h4 id="用户行为限制"><a href="#用户行为限制" class="headerlink" title="用户行为限制"></a>用户行为限制</h4><p>安卓端下，滚动行为不归属在用户操作行为中，滚动事件中无法执行视频播放，在这个问题上，笔者使用 <code>touchstart</code> 对安卓端进行 hack。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://www.cnblogs.com/baiyygynui/p/6323565.html" target="_blank" rel="external">video 标签在微信浏览器的问题解决方法</a></li><li><a href="https://www.zhihu.com/question/36423771" target="_blank" rel="external">微信内置浏览器 如何小窗不全屏播放视频？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;近日，由于工作原因，需要开发一款视频类 h5。玩法很简单，用户滚页面至底部，切换全屏视频播放。&lt;br&gt;地址如下：&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="经验总结" scheme="http://blog.minfive.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="wechat" scheme="http://blog.minfive.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git Rebase 美化 Git Commit 流程</title>
    <link href="http://blog.minfive.com/2017/10/06/2017-10-06-git-rebase/"/>
    <id>http://blog.minfive.com/2017/10/06/2017-10-06-git-rebase/</id>
    <published>2017-10-05T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章讲到 <a href="/2017/09/08/2017-09-08-git-commit-message/">commit message 规范</a>，git 版本控制在日常团队协作中有着极其重要的作用，除了对 git 的 commit 信息进行规范化管理之外，还可以对 git 的 commit 做一些补丁修饰，即 git rebase。</p><h3 id="什么是-git-rebase"><a href="#什么是-git-rebase" class="headerlink" title="什么是 git rebase"></a>什么是 git rebase</h3><p>在 git 中对于不同分支间的修改有两种方式：<code>merge</code> 和 <code>rebase</code>，merge 这个比较常用，用于合并分支，同样的，rebase 也可用于合并分支，虽然较少使用，但功能却比简单的 merge 强大的多。</p><p>rebase 即变基，顾名思义，就是改变基准点，以 commit 为基准点可以随意修改 commit 历史，以分支为基准点可以合并分支，同时整理 commit。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>上文讲到 rebase 可以以 commit 为基准点也可以以分支为基准点，那么以笔者为例，rebase 的主要用法如下：</p><ul><li>修改 commit 历史，结合上一篇文章讲的 <a href="/2017/09/08/2017-09-08-git-commit-message/">commit message 规范</a>，可以做到每一个 commit 仅切只做一件事情，单一原则。</li><li>合并分支，使分支保持单一链式，避免频繁的切换分支指向，导致分支 commit 混乱。(强迫症必备良药)</li></ul><h4 id="commit-的修改"><a href="#commit-的修改" class="headerlink" title="commit 的修改"></a>commit 的修改</h4><p>对于 commit 的修改可以使用 <code>git commit -amend</code> 修改下 commit 信息，如果要修改多个 commit，那么就要使用 <code>git rebase</code> 了。</p><p>简单流程如下：</p><p>使用 <code>git log --oneline</code> 获取相应 commit 的哈希值（该 commit 为基准点，不参与本次修改）;</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/git-log-oneline.png" alt="git-log"></p><p>使用 <code>git rebase -i 5663aa4(指定的基准点)</code> 进入 vi 模式手动编辑选定区间内的 commit，可合并可编辑可删除，具体操作请参照 vi 界面的注释内容。</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/git-rebase-commit.png" alt="git-rebase-commit"></p><p>结合 <a href="/2017/09/08/2017-09-08-git-commit-message/">commit message 规范</a> 就可以实现完美的单一任务原则 commit，在正式完成某个任务之后，可以通过 rebase 将无意义的 commit 合并在一起。</p><h4 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h4><p>分支的合并有两种方式：<code>merge</code> 和 <code>rebase</code>，两种方式的具体区别大家可以参考 <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="external">Pro Git Book</a> 的解释。</p><p>简单来说：</p><p>对于相同情况下的 git 分叉：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/basic-rebase-1.png" alt="git-rebase-1"></p><p>merge 的合并如下图：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/basic-rebase-2.png" alt="git-rebase-2"></p><p>rebase 的合并如下图：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/basic-rebase-4.png" alt="git-rebase-3"></p><p>两者的区别在于 merge 只是简单的把所有改动整合到一个 commit 中，并保留 commit 纪录，还会产生恶心人的非必要合并 commit，而 rebase 则会根据最近的共同祖先作为基准点将改动依次进行排序，当前分支的改动永远置于最后，且不会产生合并 commit。</p><h3 id="双刃剑"><a href="#双刃剑" class="headerlink" title="双刃剑"></a>双刃剑</h3><p>在日常团队协作开发一般都推荐 git flow 的工作流程，禁止使用 rebase 来合并分支，主要的原因在于 rebase 会改变整个分支的 commit 流向，极其容易产生版本冲突，所以，对于 rebase 的使用，笔者有几个小小的建议：</p><ul><li>使用 rebase 修改 commit 只在本地分支发生</li><li>本地分支 push 到服务器仓库上前都应该先 <code>git rebase origin (branch)</code> 保证拉取最新代码。 </li><li>禁止使用 <code>git push --force</code> 覆盖服务器上的提交历史。</li></ul><p>总而言之，rebase 是一个很强大的工具，只要操作得当，绝对是一大杀器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上，笔者总结来一套用来结合 <a href="/2017/09/08/2017-09-08-git-commit-message/">commit message 规范</a> 和 <code>git rebase</code> 的工作流程，具体如下：</p><p>假设团队开发项目除 <code>master</code> 分支外再有 <code>develop</code> 分支，那么在本地开发中应基于 <code>develop</code> 分支创建一个自定义分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git branch -b minfive</div></pre></td></tr></table></figure><p>然后在自定义分支上执行任意开发，一个功能点开发完成后，使用 rebase 整理合并所有新增 commit 为单个符合 <a href="/2017/09/08/2017-09-08-git-commit-message/">commit message 规范</a> 的 commit，每完成一个完整功能点整理合并一次 commit，开发完成后再通过 rebase 将整理过 commit 的自定义分支合并到 <code>develop</code> 分支。</p><p>到这一步，本地开发已完成，需要提交代码到服务器，那么请使用 <code>git pull --rebase</code> 拉取服务器最新 commit 并 rebase 合并到 <code>develop</code> 分支。有冲突解决冲突，没冲突则可以直接 push 代码上服务器。</p><blockquote><p>注：应尽可能保持自定义分支与开发分支的同步，一般情况下，每更新一次开发分支，笔者都会基于开发分支重建一次自定义分支用来保证 rebase 基准点的准确性。</p></blockquote><p>然后剩下的其它流程基本与 git flow 工作流程一致。</p><p>这样一套流程下来，commit 的流向如下图：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/git-rebase.png" alt="git-rebase"></p><p>而不会出现多余的合并 commit 出现：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/post/17-10-06/git-merge.png" alt="git-merge"></p><p>简直是强迫症解救神器啊！！！</p><blockquote><p>另：附上 <a href="https://github.com/MinFE/git-rebase-demo" target="_blank" rel="external">demo</a> 一枚。</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git book</a></li><li><a href="http://gitbook.liuhui998.com/4_2.html" target="_blank" rel="external">Git Community book</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上篇文章讲到 &lt;a href=&quot;/2017/09/08/2017-09-08-git-commit-message/&quot;&gt;commit mes
      
    
    </summary>
    
      <category term="经验总结" scheme="http://blog.minfive.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="git" scheme="http://blog.minfive.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Css Modules 小试</title>
    <link href="http://blog.minfive.com/2017/10/04/2017-10-04-css-module/"/>
    <id>http://blog.minfive.com/2017/10/04/2017-10-04-css-module/</id>
    <published>2017-10-03T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个css模块即一个定义好了所有样式（类）和动画名称的本地css文件</p><blockquote><p>官方推荐仅使用类来定义样式</p></blockquote><p>CSS Modules 会编译成一种低层级的ICSS，但它的格式与正常css格式相似</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* style.css */</span></div><div class="line"><span class="selector-class">.className</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当使用js模块导入css模块时，它输出一个属性与本地样式名称相对应的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./style.css'</span>;</div><div class="line"></div><div class="line">element.innerHTML = <span class="string">'&lt;div class="'</span> + styles.className + <span class="string">'"&gt;'</span>;</div></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><hr><p>对于本地类名建议使用驼峰命名，但并非强制</p><blockquote><p>关于使用驼峰命名的方式主要是为了更好在js中导入并使用css模块</p></blockquote><p>可以为css-loader增加camelCase参数来实现自动转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.css$/</span>,</div><div class="line">    loader: <span class="string">'style!css?modules&amp;camelCase'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><code>:global</code>: 切换到当前选择器所在全局作用域下<br><code>:local</code>: 切换到局部作用域下</p><p>如果切换到全局模式下，定义的样式将允许在全局作用域中使用</p><p>Example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.localA</span> <span class="selector-pseudo">:global</span> <span class="selector-class">.global-b</span> <span class="selector-class">.global-c</span> <span class="selector-pseudo">:local(.localD.localE)</span> <span class="selector-class">.global-d</span></div></pre></td></tr></table></figure></p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>用于组合其它选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.className</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">    <span class="attribute">composes</span>: className;</div><div class="line">    <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>允许拥有多个组成规则，但组成规则必须先于其它规则。当一个类composes另外一个类时，css模块对外的接口为当前类名，允许添加多个类名。</p><p>组成规则允许使用多个类：<code>composes: classNameA classNameB</code></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>允许compose其它CSS Modules的类名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">    <span class="attribute">composes</span>: className from <span class="string">'./style.css'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：</p><ol><li>当从不同的文件composes多个类时，compose的顺序是不确定的，因此，需要确保composes的类没有定义相同的属性值</li><li>compose不应该循环嵌套，因为Elsewise是无法确定这是组成规则还是属性，模块系统将会发出一个错误。</li><li>最好的方式就是基本类与依赖分离</li></ol><h3 id="为什么使用CSS-Modules"><a href="#为什么使用CSS-Modules" class="headerlink" title="为什么使用CSS Modules"></a>为什么使用CSS Modules</h3><p>模块化和可重复使用的css</p><ul><li>解决命名冲突</li><li>显式依赖</li><li>没有全局作用域</li></ul><h3 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h3><p>默认为哈希字符串<br><img src="https://sfault-image.b0.upaiyun.com/127/065/1270651827-571acfceca712" alt="image"></p><p>允许自定义配置<br><img src="https://sfault-image.b0.upaiyun.com/431/079/431079432-571acff0052ea" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;一个css模块即一个定义好了所有样式（类）和动画名称的本地css文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方推荐仅使用类来定义样式&lt;/
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="css" scheme="http://blog.minfive.com/tags/css/"/>
    
      <category term="css modules" scheme="http://blog.minfive.com/tags/css-modules/"/>
    
  </entry>
  
  <entry>
    <title>Postcss 小试</title>
    <link href="http://blog.minfive.com/2017/10/02/2017-10-02-postcss-test/"/>
    <id>http://blog.minfive.com/2017/10/02/2017-10-02-postcss-test/</id>
    <published>2017-10-01T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-postcss"><a href="#What-is-postcss" class="headerlink" title="What is postcss"></a>What is postcss</h3><ul><li>PostCSS 为基于 JavaScript 开发的 css 后处理器</li><li>PostCSS 提供了一个解析器，它能够将 CSS 解析成抽象语法树（AST）</li><li>PostCSS 的实际强悍之处为插件系统，依赖插件系统可以对 CSS 做任意处理</li></ul><p><img src="http://oo12ugek5.bkt.clouddn.com/postcss-demo/239162490-562dd5c1849a6_articlex.png" alt="图片"></p><h3 id="What-can-it-do"><a href="#What-can-it-do" class="headerlink" title="What can it do"></a>What can it do</h3><ul><li>对 CSS 文件做任意后期处理（即 PostCss 称为 css 后处理器的原因），例如：autoprefixer</li><li>扩展 css 语法 例如：cssnext</li></ul><h3 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use"></a>how to use</h3><p><a href="https://github.com/postcss/postcss#usage" target="_blank" rel="external">doc.usage</a></p><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">use: [</div><div class="line"><span class="string">'css-loader'</span>,</div><div class="line">&#123;</div><div class="line">loader: <span class="string">'postcss-loader'</span>,</div><div class="line">options: &#123;</div><div class="line">plugins: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'postcss-import'</span>),</div><div class="line">    <span class="built_in">require</span>(<span class="string">'postcss-css-variables'</span>)(&#123; <span class="attr">preserve</span>: <span class="literal">false</span> &#125;),</div><div class="line"><span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)(&#123;</div><div class="line">    browsers: [</div><div class="line">    <span class="string">"&gt; 1%"</span>,</div><div class="line">        <span class="string">"last 2 versions"</span></div><div class="line">    ]</div><div class="line">    &#125;)</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="Features-CSS"><a href="#Features-CSS" class="headerlink" title="Features CSS"></a>Features CSS</h2><h3 id="未来语法"><a href="#未来语法" class="headerlink" title="未来语法"></a>未来语法</h3><ul><li>嵌套</li><li>自定义属性</li><li>…</li></ul><p>基于 PostCSS 可以将未来语法转换为现阶段的语法。</p><p><a href="http://cssnext.io/features/" target="_blank" rel="external">features</a></p><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><ul><li>PostCss 的处理顺序依赖插件的顺序，错误的顺序可能带来意想不到的编译结果</li><li>PostCss 总体还不大成熟，对于自定义属性仅在 <code>:root</code> 下的支持比较完美，局部作用域总会出现意想不到的问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-is-postcss&quot;&gt;&lt;a href=&quot;#What-is-postcss&quot; class=&quot;headerlink&quot; title=&quot;What is postcss&quot;&gt;&lt;/a&gt;What is postcss&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PostCSS 为基于 
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="postcss" scheme="http://blog.minfive.com/tags/postcss/"/>
    
  </entry>
  
  <entry>
    <title>Commit Message 规范 及自动化 Changelog</title>
    <link href="http://blog.minfive.com/2017/09/08/2017-09-08-git-commit-message/"/>
    <id>http://blog.minfive.com/2017/09/08/2017-09-08-git-commit-message/</id>
    <published>2017-09-07T16:52:53.000Z</published>
    <updated>2017-10-22T13:27:55.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章假设读者了解并使用过 git ，不熟悉的同学请移步 <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">pro git</a>。</p><p>使用过 git 来做版本控制的同学应该都知道每次提交修改 <code>git commit</code> 时，git 总会强制要求填写提交说明，否则不允许提交。填写的格式不限，内容也不限，当然为了提高项目的可维护性，commit message 做适当的格式要求是必要的，不说 review 起来方便，就冲看起来格式规整这一点，看起来都舒服得多了。</p><p>例子：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-09-07/git-commit-bad.png" alt="bad-git-commit"></p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-09-07/angular-commit.png" alt="angular-commit"></p><p>话题转回 commit message 规范，社区总结了许多 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="external">commit 规范</a>，其中包括：</p><p><a href="http://oo12ugek5.bkt.clouddn.com/blog/images/17-09-07/commit-norm-list.png" target="_blank" rel="external">commit-norm-list</a></p><p>笔者倾向于使用 angular 的 commit message 规范，更系统，本文也将使用该规范为例。</p><h3 id="commit-message-格式"><a href="#commit-message-格式" class="headerlink" title="commit message 格式"></a>commit message 格式</h3><p>commit message 主要包括三个部分：Header、Body、Footer。</p><p>格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;footer&gt;</div></pre></td></tr></table></figure></p><p>除 Header 外，Body、Footer均为非必填项。</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 要求单行，其中包括 <code>&lt;type&gt;</code>、<code>&lt;scope&gt;</code>、<code>&lt;subject&gt;</code>三个部分。</p><h5 id="type"><a href="#type" class="headerlink" title="type"></a><code>type</code></h5><p>用来标识 commit 的类型，总共有以下 11 个标识：</p><ul><li><code>feat</code>: 添加了一个新功能</li><li><code>fix</code>: 修复了一个 bug</li><li><code>docs</code>: 文档发生修改</li><li><code>style</code>: 不影响代码运行的更改（空格，格式，缺少分号等）</li><li><code>refactor</code>: 重构代码且不引进新的功能或修复 bug</li><li><code>perf</code>: 代码优化</li><li><code>test</code>: 添加或修改测试用例</li><li><code>build</code>: 构建工具或外部依赖的更改（npm，webpack，gulp等）</li><li><code>ci</code>: 更改项目级的配置文件或脚本</li><li><code>chore</code>: 除上述之外的修改</li><li><code>revert</code>: 撤销改动先前的提交</li></ul><blockquote><p>特别注意：使用 <code>revert</code> 标识撤销 commit 时，<code>subject</code> 应为所撤销的 commit 的 message， Body 应包含 所撤销的 commit 的 hash。</p></blockquote><p>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">revert: fix: change aa to bb</div><div class="line">    </div><div class="line">This reverts commit ca1b58f63fcaa2ae763a5604e5b46e802d83105c.</div></pre></td></tr></table></figure><h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a><code>scope</code></h5><p>用来标识改动所影响的范围，视项目而定。</p><h5 id="subject"><a href="#subject" class="headerlink" title="subject"></a><code>subject</code></h5><p>改动的简短描述，不超过 50 字符长度。</p><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>本次 commit 的详细描述。</p><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>主要用于两种情况：</p><ul><li>重大的不兼容改动: 用于给出改动说明及解决方案。</li><li>关联 issues: 用于关闭相应 issues。</li></ul><h3 id="高效使用"><a href="#高效使用" class="headerlink" title="高效使用"></a>高效使用</h3><p>上边介绍了如何按规范写 commit message，那么下面教你如何利用工具更高效的使用这套规范。</p><p>首先我们来介绍几个工具包:</p><h4 id="commitizen"><a href="#commitizen" class="headerlink" title="commitizen"></a><a href="https://github.com/commitizen/cz-cli#making-your-repo-commitizen-friendly" target="_blank" rel="external">commitizen</a></h4><p>commitizen 是用来快速生成指定的 commit message 规范的工具包，具体使用方式请参照 <a href="https://github.com/commitizen/cz-cli#making-your-repo-commitizen-friendly" target="_blank" rel="external">官方文档</a> 或参照下文给出的 demo。</p><blockquote><p>注： 官方推荐全局安装，然后使用全局 <code>git-cz</code> 命令来快速生成 commit message，但是由于笔者极不喜欢污染全局环境，所以以下例子中使用局部安装的方式来使用该包</p></blockquote><p>安装相应依赖包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev commitizen cz-conventional-changelog</div></pre></td></tr></table></figure></p><p>添加如下启动脚本至项目根目录, 文件名假定为 <code>git-cz.js</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> bootstrap = <span class="built_in">require</span>(<span class="string">'commitizen/dist/cli/git-cz'</span>).bootstrap;</div><div class="line"></div><div class="line">bootstrap(&#123;</div><div class="line">    cliPath: path.join(__dirname, <span class="string">'./node_modules/commitizen'</span>),</div><div class="line">    config: &#123;</div><div class="line">        path: path.join(__dirname, <span class="string">'./node_modules/cz-conventional-changelog'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>添加 npm 脚本命令进 package.json 中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"srcipt"</span>: &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">"git-cz"</span>: <span class="string">"node run git-cz.js"</span></div><div class="line">        ...</div><div class="line">    &#125; </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok，做到这一步大功告成，使用 <code>npm run git-cz</code> 即可启动该工具包，但是：笔者认为键入 npm 命令启动总觉得于 git 分格格格不入，因此有了下面的另一步：</p><p>使用 git 别名来启动 npm 命令（关于 git 别名请参考 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-Git-%E5%88%AB%E5%90%8D" target="_blank" rel="external">pro git</a>）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config alias.cz '!npm run git-cz'</div></pre></td></tr></table></figure><p>然后就可以愉快的使用 <code>git cz</code> 快速生成符合规范的 commit message了。</p><h4 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a><a href="https://github.com/conventional-changelog/validate-commit-msg" target="_blank" rel="external">validate-commit-msg</a></h4><p>用于检查 当前项目的 commit message 是否符合格式，下例中使用 <a href="https://github.com/ghooks-org/ghooks" target="_blank" rel="external">ghooks</a> 配合使用</p><p>使用 npm 安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev validate-commit-msg ghooks</div></pre></td></tr></table></figure><p>在项目根目录中新建 <code>.vcmrc</code> 配置文件（具体参数作用请参照该项目 REAMDE），文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"types"</span>: [</div><div class="line">        <span class="string">"feat"</span>,</div><div class="line">        <span class="string">"fix"</span>,</div><div class="line">        <span class="string">"docs"</span>,</div><div class="line">        <span class="string">"style"</span>,</div><div class="line">        <span class="string">"refactor"</span>,</div><div class="line">        <span class="string">"perf"</span>,</div><div class="line">        <span class="string">"test"</span>,</div><div class="line">        <span class="string">"build"</span>,</div><div class="line">        <span class="string">"ci"</span>,</div><div class="line">        <span class="string">"chore"</span>,</div><div class="line">        <span class="string">"revert"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"scope"</span>: &#123;</div><div class="line">        <span class="string">"required"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"allowed"</span>: [<span class="string">"*"</span>],</div><div class="line">        <span class="string">"validate"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"multiple"</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"warnOnFail"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"maxSubjectLength"</span>: <span class="number">100</span>,</div><div class="line">    <span class="string">"subjectPattern"</span>: <span class="string">".+"</span>,</div><div class="line">    <span class="string">"subjectPatternErrorMsg"</span>: <span class="string">"subject does not match subject pattern!"</span>,</div><div class="line">    <span class="string">"helpMessage"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"autoFix"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将以下配置写入 package.json 文件的环境配置中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"config"</span>: &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">"ghooks"</span>: &#123;</div><div class="line">            <span class="string">"commit-msg"</span>: <span class="string">"validate-commit-msg"</span></div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ok，配置完成后，该项目每次 commit 时，都将启动该脚本进行检测，如 commit message 格式不正确，本次 commit 失败。</p><blockquote><p>注: 有兴趣的同学可以去阅读 ghooks 源码，以及了解什么是 git hooks。</p></blockquote><h4 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="external">standard-version</a></h4><p>用于依据 commit message 生成 changelog 以及版本发布。</p><p><em>注：</em>默认情况下 changelog 只根据 type 为 <code>feat</code> 和 <code>fix</code> 类型的 commit message 来生成。</p><p>使用 npm 安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev standard-version</div></pre></td></tr></table></figure><p>添加 npm 脚本命令进 package.json 中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"srcipt"</span>: &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">"release"</span>: <span class="string">"standard-version"</span></div><div class="line">        ...</div><div class="line">    &#125; </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行 <code>npm run release</code> 即可快速生成 changelog 以及生成相应版本 tag，具体使用方式请查阅该项目介绍。</p><p>综合上述关于 commit message 的规范以及日常开发中对 git 的使用，笔者写了一个小 <a href="https://github.com/MinFE/git-commit-lint" target="_blank" rel="external">demo</a>，具体内容如下：</p><ul><li>使用 <code>git cz</code> 快速生成符合规范的 commit message</li><li>使用 git hooks commit-msg 配合 <code>validate-commit-msg</code> 校验 commit message 格式，保证格式统一</li><li>使用 git hooks post-merge 及相应脚本对合并到 master 分支操作进行绑定，当从其它分支合并到 master 分支时，自动生成 changelog 及相应版本的tag</li></ul><p>甚至可以利用 git hooks 做更多自动化的工作，有兴趣的同学可以去尝试下。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="external">Commit message 和 Change log 编写指南</a></li><li><a href="https://segmentfault.com/a/1190000004282514" target="_blank" rel="external">［译］AngularJS Git提交信息规范</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git book</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;文章假设读者了解并使用过 git ，不熟悉的同学请移步 &lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; t
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://blog.minfive.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="规范" scheme="http://blog.minfive.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="自动化" scheme="http://blog.minfive.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="git" scheme="http://blog.minfive.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>客户端存储indexedDB探究</title>
    <link href="http://blog.minfive.com/2016/05/15/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8indexedDB%E6%8E%A2%E7%A9%B6/"/>
    <id>http://blog.minfive.com/2016/05/15/客户端存储indexedDB探究/</id>
    <published>2016-05-14T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.724Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>趁着最近清闲，把先前落下的红宝书下半部分给看完了，最感冒的是客户端存储，WebSocket以及canvas（WebGL），WebSocket这个我就不说了，剩下的一个是我认为将来会在移动应用上大显身手的东西，一个则是前端可视化大趋势下必不可少的东西，canvas（WebGL）的话因为暂时还没入坑，所以先不讲，以后研究完了会补上来，这篇文章就主讲客户端存储。</p><blockquote><p>文章基于《javascript高级程序设计》23章以及MDN技术文档加上个人的一些见解，结构主体是技术文档，穿插一些个人踩坑的总结，如见解有误，请指出，谢谢！</p></blockquote><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>IndexedDB</code>本片文章的主人公，在红包书中的解释是:”Indexed Database API,是在浏览器中保存结构化数据的一种<code>数据库</code>“，对的！你没看错，就是数据库，而且是一种类SQL的结构型数据库，最大的特色就是用对象来存储数据，容量以及数据存储查询速度远比storage（local/session）好的多，但缺点就是支持程度还不是很好。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>由于目前兼容性的问题，所以使用前需要对浏览器提供的API进行兼容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB;</div><div class="line"><span class="built_in">window</span>.IDBTransaction = <span class="built_in">window</span>.IDBTransaction || <span class="built_in">window</span>.webkitIDBTransaction || <span class="built_in">window</span>.msIDBTransaction;</div><div class="line"><span class="built_in">window</span>.IDBKeyRange = <span class="built_in">window</span>.IDBKeyRange || <span class="built_in">window</span>.webkitIDBKeyRange || <span class="built_in">window</span>.msIDBKeyRange;</div></pre></td></tr></table></figure><h4 id="基本使用模式"><a href="#基本使用模式" class="headerlink" title="基本使用模式"></a>基本使用模式</h4><ol><li>打开数据库并且开始一个事务。</li><li>创建一个 object store。</li><li>构建一个请求来执行一些数据库操作，像增加或提取数据等。</li><li>通过监听正确类型的 DOM 事件以等待操作完成。</li><li>在操作结果上进行一些操作（可以在 request 对象中找到）</li></ol><blockquote><p>记住一点，任何对indexedDB数据库的操作都是异步进行的，任何操作都会有两个必定的事件权柄：<code>success</code>和<code>error</code>，以下的操作均要事情设置相应的监视事件防止出现错误，由于个人比较懒，在这里展示就不加上了</p></blockquote><h4 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h4><p>和mysql/sql数据库的使用一样，indexedDB的使用依旧是从打开数据库开始的，打开方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = indexedDB.open(DBname, version);</div><div class="line"><span class="comment">// DBname：数据库名； version：要打开的数据库版本号（可不传值，默认为最新版本）</span></div></pre></td></tr></table></figure><blockquote><p>版本号只能使用int类型，而不能使用浮点数，不然会导致错误</p></blockquote><p>与其它操作不同，open操作特有两个权柄：<code>upgradeneeded</code>（版本更新）和<code>blocked</code>（没有关闭连接尝试连接，（不常用））;</p><p>依据基本使用模式，正确的打开姿势应为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = indexedDB.open(DBname, version);</div><div class="line"></div><div class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">request.onsuccess = funciton() &#123;&#125;;</div><div class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">request.onblocked = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 打开的数据库为request触发的成功事件中的event.target.result;</span></div><div class="line"></div><div class="line"><span class="comment">// 以后的操作参照这种方式创建监视事件</span></div></pre></td></tr></table></figure><blockquote><p>注：这里有一个坑，upgradeneeded（版本改动），故名思意是版本改动才会触发的事件，在MDN上的解释是“在数据库第一次被打开时或者当指定的版本号高于当前被持久化的数据库的版本号时，这个版本改动事务将被创建。”，而<code>任何对数据库结构产生改变的操作都应该在这个事件内执行</code>，至于怎么改变数据库结构，请看下文。</p></blockquote><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">indexedDB.deleteDatabase(DBname);</div></pre></td></tr></table></figure><h4 id="对象存储空间"><a href="#对象存储空间" class="headerlink" title="对象存储空间"></a>对象存储空间</h4><p>关于对象存储空间，咱们可以把它看成是数据库的一个表，存储空间（表）的使用如下：</p><h5 id="打开存储空间"><a href="#打开存储空间" class="headerlink" title="打开存储空间"></a>打开存储空间</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.objectStore(storeName);</div></pre></td></tr></table></figure><h5 id="创建存储空间"><a href="#创建存储空间" class="headerlink" title="创建存储空间"></a>创建存储空间</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.createObjectStore(storeName, &#123;<span class="attr">keyPath</span>: keyName， autoIncrement: <span class="literal">true</span>&#125;);</div><div class="line"><span class="comment">// 创建存储空间</span></div></pre></td></tr></table></figure><p>创建存储空间必须设置keyPath（可以把它看成是存储空间的主键），createObjectStore方法的第二个参数对象就是对keyPath键的配置，配置对象中除了指定键为keyPath，还有另外一个属性<code>autoIncrement</code>,这个属性在MDN文档上的解释是</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-08-07/createObjectStore.png" alt="createStore"></p><p>通俗化讲就是<code>autoIncrement</code>属性是用来设置在被指定为keyPath的键为空时，是否自动生成keyPath值（这里有一点：不启用自动填补keyPath值时，因为keyPath是必须的，如果传入的数据中被指定为keyPath的键为空时，会导致创建存储空间失败，触发error事件）</p><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><p>什么是索引：</p><p>当用户想要通过其它键去访问查询存储空间中的数据时，索引就派上用场了，索引可以看成是存储空间的一个副本，只不过把主键替换成你想要的键，但它并不真实存在，只是给存储空间的访问查询提供了便利。</p><p>创建方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.createObjectStore(storeName, &#123;<span class="attr">keyPath</span>: keyName， autoIncrement: <span class="literal">true</span>&#125;；</div><div class="line">store.createIndex(indexName, keyName, &#123; <span class="attr">unique</span>: <span class="literal">false</span>&#125;);</div><div class="line"><span class="comment">// createIndex有三个参数，第一个为索引名，第二个为设置索引的键，第三个为配置对象，unique表示是否允许重复，是否允许重复要根据存储空间的数据而定</span></div></pre></td></tr></table></figure><h5 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h5><p>向存储空间中填充数据有两个方法：add方法和put方法，两个方法都是向存储空间中填充数据，但add相当于插入新值，当存储空间中已有相同数据（即keyPath值相同）时会返回错误，put相当于更新原有的值，与add方法相反，put方法会更新已有的数据。</p><p>使用方式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">store.add(obj);</div><div class="line">store.put(obj);</div><div class="line"><span class="comment">// obj为格式正确的数据对象</span></div></pre></td></tr></table></figure><h5 id="修改存储空间结构"><a href="#修改存储空间结构" class="headerlink" title="修改存储空间结构"></a>修改存储空间结构</h5><p>对于创建索引和设置keyPath的操作均视为改变数据库结构的操作，因此这些操作必须在upgradeneeded事件下进行，那么问题来了，如果你想重新配置数据库，那么应该怎么去触发这个事件呢？</p><p>解决方法有很多种，在这里介绍两种比较实用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种，关闭现有数据库连接，打开新版本号的数据库</span></div><div class="line"><span class="keyword">var</span> request = indexedDB.open(dbName, version),</div><div class="line">    db;</div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    db = event.target.result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里设置延时，因为数据库操作是异步进行的</span></div><div class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    db.close();</div><div class="line">    </div><div class="line">    request = indexedDB.open(dbName, version + <span class="number">1</span>);</div><div class="line">    request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        db = event.target.result;</div><div class="line">    &#125;</div><div class="line">    requese.onupgradeneeded(event) &#123;</div><div class="line">        <span class="comment">// 这里是更改数据库结构的代码</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">&#125;, <span class="number">200</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 第二种，与第一种原理相同，只不过换了另外一种方式</span></div><div class="line"><span class="keyword">var</span> request = indexedDB.open(dbName, version),</div><div class="line">    db;</div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    db = event.target.result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> deleteDbRequest = db.deleteDatabase(dbName);</div><div class="line">    deleteDbRequest.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> openRequest = localDatabase.indexedDB.open(dbName,<span class="number">1</span>);</div><div class="line"></div><div class="line">        openRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">            db = openRequest.result;</div><div class="line">        &#125;;  </div><div class="line">        openRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">            <span class="comment">// 这里是更改数据库结构的代码</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>在红宝书中的解释是“跨过创建对象存储空间这一步之后，接下来的所有操作都是要通过事务来完成，任何时候，只要想读取或修改数据，都要通过事务来组织所有操作”，简单点说就是事务就是一个工具，通过这个工具，你才能任意的去数据库中获取你想要的东西。</p><blockquote><p>这里需要注意一下，事务接收的DOM事件与其它操作有点不同，它接收三个事件：error（失败），abort（中止），complete（完成），至于传递额事件对象及其使用方法请参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="external">MDN文档</a></p></blockquote><p>事务的所有方法及属性如下：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-08-07/transaction.png" alt="transaction"></p><h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><p>在数据库中调用transaction（）方法进行创建事务，该方法可指定两个参数，第一个参数是事务可操作的存储空间，该参数可为数组，传递多个存储空间，第二个参数是事务的访问模式（也就是访问权限），模式有三种：读写（readwrite）、只读（readonly）、版本改变（versionchange），不设置访问模式的话默认是readonly。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不带任何参数，表示创建一个能访问数据库中所有存储空间的事务，但这个事务只有读取的权限</span></div><div class="line"><span class="keyword">var</span> transaction = db.transaction();</div><div class="line"></div><div class="line"><span class="comment">// 指定一个存储空间</span></div><div class="line"><span class="keyword">var</span> transaction = db.transaction(storeName);</div><div class="line"></div><div class="line"><span class="comment">// 指定多个存储空间</span></div><div class="line"><span class="keyword">var</span> transaction = db.transaction([storeName1, storeName2]);</div><div class="line"></div><div class="line"><span class="comment">// 指定一个存储空间并设置读写权限</span></div><div class="line"><span class="keyword">var</span> transaction = db.transaction(storeName, <span class="string">"readwrite"</span>);</div></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>在创建了事务后，可以使用objectStore（）方法传入存储空间的名称，获取存储空间对象，这个基于事务创建的存储空间对象会比createObjectStroe（）方法创建的存储空间对象多一些可使用的方法：get[取值]、delete[删除指定数据对象]、clear[清空存储空间中所有数据]等常用方法外，还有其它方法，所有方法请见下图：</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-08-07/store.png" alt="store"></p><blockquote><p>这部分只展示一些常用的方法，其余方法请自行参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="external">文档</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction(tableName, <span class="string">"readwrite"</span>).objectStore(<span class="string">"tableName"</span>),</div><div class="line">    request;</div><div class="line"><span class="comment">// 获取指定keyPath值的数据</span></div><div class="line">request = store.get(keyPathValue);</div><div class="line"></div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"数据为"</span> + <span class="built_in">JSON</span>.stringify(event.target.result));</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 删除指定数据</span></div><div class="line">request = store.delete(keyPathValue);</div><div class="line"></div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"删除成功"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 清空存储空间</span></div><div class="line">request = store.clear();</div><div class="line"></div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"清空了存储空间"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>上边说的所有操作，基本上和普通的数据库没有太大差别，而游标却是indexedDB最具特色的一个东西，与键范围结合使用将大大加快数据检索速度，同时操作也将更为方便。<br>游标的话可以看成是一个指针，指向存储空间的某个位置，每个位置上均有一个数据对象，然后可以对数据对象进行操作，游标可以按你意愿进行移动，访问你想访问的数据。<br>键范围的话则是在存储空间中再划分出来一个范围进行检索，缩小了检索的范围。</p><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><p>使用openCursor（）方法进行创建，该方法接收两个参数，第一个参数为键范围实例，第二个参数为游标的移动方向。两个参数均有默认值。</p><p>移动方向有4个设置常量：</p><blockquote><ol><li>IDBCursor.NEXT(0)：下一项，为默认值。</li><li>IDBCursor.NEXT_NO_DUPLICATE(1)：下一个不重复的项。</li><li>IDBCursor.PREV(2)：前一项。</li><li>IDBCursor.PREV_NO_DUPLICATE：前一个不重复的项。</li></ol></blockquote><h4 id="游标自身（IDBCursor实例）"><a href="#游标自身（IDBCursor实例）" class="headerlink" title="游标自身（IDBCursor实例）"></a>游标自身（IDBCursor实例）</h4><p>IDBCursor实例有4个属性，分别是：</p><ol><li>direction：数值，表示游标移动的方向。</li><li>key：对象的键。</li><li>value：实际的数据对象。</li><li>primaryKey：游标使用的键（即当前存储空间或索引中设置的主键）。</li></ol><blockquote><p>以上4个属性均为只读</p></blockquote><p>另外，IDBCursor实例还有几个常用方法：</p><ol><li>update（dataObj）：更新当前游标所对应的数据对象值，dataObj为传递的新数据。</li><li>delete（）：删除当前游标所对应的数据。</li><li>continue（key）：移动游标到结果集中的下一项。参数key是可选的，不指定这个参数，游标移动到下一项；指定这个参数，游标会移动到指定键的位置。</li><li>advance（count）：向前移动count指定个项数。</li></ol><blockquote><p>这里有一点要注意，每一次移动游标成功后，触发的success事件的event.target.result为IDBCursor实例自己，但当移动方向在结果集中再无下一项，仍然移动光标的话，event.target.result的值将为undefined。</p></blockquote><p>使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction(tableName).objectStore(storeName),</div><div class="line">    request,</div><div class="line">    cursor;</div><div class="line"></div><div class="line">request = store.openCursor(); <span class="comment">// 在这里可以传入配置好的键范围</span></div><div class="line"></div><div class="line"><span class="comment">// 读取属性值及使用方法</span></div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    cursor = event.target.result;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (cursor) &#123;</div><div class="line">        <span class="comment">// 必须进行判断</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"数据对象为"</span> + <span class="built_in">JSON</span>.stringify(cursor.value));</div><div class="line">        cursor.continue(); <span class="comment">// 游标移动到下一项</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="键范围"><a href="#键范围" class="headerlink" title="键范围"></a>键范围</h4><p>使用IDBKeyRange对象创建相应的键范围<br>IDBKeyRange对象有4中不同的创建方法：only（）、lowerBound（）、upperBound（）以及bound（）；</p><ol><li>only：只取得主键值为指定值得数据。传递一个参数keyPathValue（主键值）；</li><li>lowerBound：从主键值为指定主键值的对象开始。传递两个参数：第一个keyPathValue（主键值），第二个为布尔值，表示是否包含满足条件的开始对象，true表示不包含，false表示包含，默认为false。</li><li>upperBound：到主键值为指定主键值的对象为止。传递参数与lowerBound方法相同，第二个参数为true代表不包含起止对象。</li><li>bound：最直接的方法，允许设置起始对象，结束对象，以及是否包含起止对象。</li></ol><blockquote><p>由于个人比较懒，在这里就不给大家撸代码了，直接贴上MDN文档中的代码，希望大家勿怪哈A_A</p></blockquote><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/17-08-07/IDBKeyRange.png" alt="IDBKeyRange"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上为个人总结的一些关于indexedDB操作的一些常用方式以及填的一些坑，希望对大家学习有帮助，如果有什么疑问错误的话，请指出，大家共同学习。另外，关于indexedDB更详细的操作方法请查询MDN文档或W3C官网，这里只是讲解一些常见的操作。<br>唉，写这篇博客真心累啊，期间从广州跑回学校，又从学校跑回广州，来来回回，千山万水！ - -宝宝心里苦啊···唉，还是希望这篇文章对大家有帮助吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;趁着最近清闲，把先前落下的红宝书下半部分给看完了，最感冒的是客户端存储，WebSocket以及canvas（WebGL），WebSocket
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://blog.minfive.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="javascript" scheme="http://blog.minfive.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript代码格式规范</title>
    <link href="http://blog.minfive.com/2016/04/03/JavaScript%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.minfive.com/2016/04/03/JavaScript代码格式规范/</id>
    <published>2016-04-02T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>实习3个月，从代码渣渣到现在的代码还是渣渣，参与了公司实际项目开发，却深受代码不规范的危害。结构混乱，代码藕隅严重，书写格式千奇百怪，开发起来着实心累，同时也会大大的拉低开发的效率，因此，更加注重了代码规范性，并将《编写可维护的JacaScript》一书中的代码规范贴上来让跟更多的人了解—如果您未了解，可以继续阅读下去，如果您已阅读过的话，请到此为止，避免做太多无用功。</p><blockquote><p>本风格指南基于“Java语言编程规范”和Crockford的（javascript）编程规范，同时结合作者的经验和喜好做了一些改动—转至《编写可维护的JavaScript》</p></blockquote><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>每一行的层级由4个空格组成，避免使用制表符（Tab）进行缩进。（这个规范因人而异吧，有些人喜欢用Tab有些人喜欢用空格，但是团队协作的话就必须统一一种方式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="行的长度"><a href="#行的长度" class="headerlink" title="行的长度"></a>行的长度</h3><p>每行长度不应该超过80个字符。如果一行多于80个字符，应该在一个运算符（都好，加号等）后换行。下一行应当增加两级缩进（8个字符） 由于使用markdown语法编写，缩进效果出不来，各位看官请勿见怪</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/ 好的写法</div><div class="line">doSomething(arguments1, argument2, argument3, argument4, argument5);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法:第二行只有4个空格的缩进</span></div><div class="line">doSomething(argument1, argument2, argument3, argument4, argument5);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：在运算符之前换行</span></div><div class="line">doSomething(argument1, argument2, argument3, argument4, argument5);</div></pre></td></tr></table></figure><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>字符串应该使用使用双引号（避免使用单引号）且保持一行。避免在字符串中使用斜线另起一行（一种通过JavaScript编译方式进行取巧的方法）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Mr.Five"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：单引号</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Mr.Five'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：字符串结束之前换行</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Here's the story, of a man \ named Brady."</span>;</div></pre></td></tr></table></figure><p>数字应当使用十进制整数，十六进制整数，或者十进制浮点小数，小数点前后应该至少保存以为数字。避免使用八进制直接量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10.0</span>;</div><div class="line"><span class="keyword">var</span> count = <span class="number">10.00</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">0xA2</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">1e23</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：十进制以小数点结尾</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10.</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：十进制数字以小数点开头</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">.1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：八进制（base 8）写法已废弃</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">010</span>;</div></pre></td></tr></table></figure><p>特殊值null除了下属情况下应当避免使用。</p><ul><li>用来初始化一个变量，这个变量可能被赋值为一个对象。</li><li>用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个对象。</li><li>当函数的参数期望是对象时，被用作参数传入。</li><li>当函数的返回值期望是对象时，被用作返回值传出。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerson</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (condition) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Mr.Five"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> person = getPerson();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (person !== <span class="literal">null</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：和一个未被初始化的变量比较</span></div><div class="line"><span class="keyword">var</span> person;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (person !==<span class="literal">null</span>) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：通过测试判断某个参数是否被传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2, arg3, arg4</span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (arg4 != <span class="literal">null</span>) &#123;</div><div class="line">        doSomethingElse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>避免使用特殊值undefined。判断一个变量是否定义应当使用typeof操作符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> variable == <span class="string">"undefined"</span>) &#123;</div><div class="line">    <span class="comment">//do sonething</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用了undefined直接量</span></div><div class="line"><span class="keyword">if</span> (variable == <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="运算符间距"><a href="#运算符间距" class="headerlink" title="运算符间距"></a>运算符间距</h3><p>二元运算符前后必须使用一个空格来保持表达式的整洁。操作符包括赋值运算符和逻辑运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> found = (values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (dund &amp;&amp; (count &gt;<span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失了空格</span></div><div class="line"><span class="keyword">var</span> found = (varlues[i]===item);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失了空格</span></div><div class="line"><span class="keyword">if</span>(found&amp;&amp;(count&gt;<span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：丢失了空格</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="括号间距"><a href="#括号间距" class="headerlink" title="括号间距"></a>括号间距</h3><p>单使用括号时，紧接左括号之后和紧接右括号之前不应该有空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> found = (values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt;<span class="number">10</span>)) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process(i);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">var</span> fount = ( values[i] === item);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt;<span class="number">10</span>) ) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    process( i );</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h3><p>对象直接量应当使用如下格式。</p><ul><li>其实左括号应当同 表达式保持同一行。</li><li>每个属性的明知对应当保持一个缩进，第一个属性应当在左花括号后另起一行。</li><li>每个属性的明知对应当使用不含引号的属性名，其后紧跟一个冒号（之前不含空格），而后是值。</li><li>倘若属性是函数类型，函数体应当在属性名之下另起一行，而且其前后均应保存一个空行。</li><li>一组相关的属性前后可以插入空行以提升代码的可读性。</li><li>结束的右花括号应当独占一行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    </div><div class="line">    key1: value1,</div><div class="line">    key2: value2,</div><div class="line">    </div><div class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    key3: value3</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不恰当的缩进</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">                key1: value1,</div><div class="line">                key2: value2</div><div class="line">            &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：函数体周围缺少空行</span></div><div class="line"><span class="keyword">var</span> objece = &#123;</div><div class="line"></div><div class="line">    key1: value1,</div><div class="line">    key2: value2,</div><div class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;,</div><div class="line">    key3: value3</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>单对象字面量作为函数参数时，如果值是变量，起始花括号应当同函数名在同一行。所有其余先前列出的规则同样适用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">doSomething(&#123;</div><div class="line">    key1: value1,</div><div class="line">    key2: value2</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：所有代码在同一行上</span></div><div class="line">doSomething(&#123; <span class="attr">key1</span>: value1, <span class="attr">key2</span>: value2&#125;);</div></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>频繁地使用注释有助于他人理解你的代码。如下情况应当使用注释。</p><ul><li>代码晦涩难懂。</li><li>可能被误认为错误的代码。</li><li>必要但并不明显的正对特定浏览器的代码。</li><li>对于对象、方法或者属性，生成文档是有必要的（使用恰当的文档注释）。</li></ul><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>单行注释应当用用来说明一行代码或者一组祥光的代码。单行注释可能有三种使用方式。</p><ul><li>独占一行的注释，用来解释下一行代码。</li><li>在代码行的尾部的注释，用来解释它之前的代码。</li><li>多行，用来注释掉一个代码块。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果执行到这里，则表明通过了所有的安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释之前没有空行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">// 如果执行到这里，则表明通过了所有的安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误的缩进</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"><span class="comment">// 如果执行到这里，则表明通过了所有的安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：这里应当使用多行注释</span></div><div class="line"><span class="comment">// 接下来的这段代码非常难，那么，让我详细解释一下</span></div><div class="line"><span class="comment">// 这段代码的作用是首先判断条件是否为真</span></div><div class="line"><span class="comment">// 只有为真时才会执行。这里的条件是通过</span></div><div class="line"><span class="comment">// 多个函数计算出来的，在整个绘画生命周期内</span></div><div class="line"><span class="comment">// 这个值是可以被修改的</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 如果执行到这里，则表明通过了所有的安全性检查</span></div><div class="line">    allowed();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于代码行尾单行注释的情况，应确保diamagnetic结尾同注释之间至少一个缩进。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">//somethingElse不能为null</span></div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse;<span class="comment">//somethingElse不能为null</span></div></pre></td></tr></table></figure><p>注释一个代码块时在连续多行使用单行注释是唯一可以接受的情况。多行注释不应当在这种情况下使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">//if (condition) &#123;</span></div><div class="line"><span class="comment">//    doSomething();</span></div><div class="line"><span class="comment">//    thenDoSomethingElse();</span></div><div class="line"><span class="comment">//&#125;</span></div></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。</p><ol><li>首行仅仅包括/*注释开始。该行不应当有其他文字。</li><li>接下来的行以*开头并保持左对齐。这些行可以有文字描述。</li><li>最后一行以*/开头并同它先前行保持对齐。也不应当有其它文字。</li></ol><p>多行注释的首行应当保持同它描述代码的相同层次的缩进。后续的每行应当有同层次的缩进并附加一个空格（为力适当保持*字符的对齐）。每一个多行代码之前应当预留一个空行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 如果代码执行到这里</span></div><div class="line"><span class="comment">     * 说明通过了所有的安全性检测</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释之前无空行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 如果代码执行到这里</span></div><div class="line"><span class="comment">     * 说明通过了所有的安全性检测</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：星号后没有空格</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     *如果代码执行到这里</span></div><div class="line"><span class="comment">     *说明通过了所有的安全性检测</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误的缩进</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    </div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 如果代码执行到这里</span></div><div class="line"><span class="comment"> * 说明通过了所有的安全性检测</span></div><div class="line"><span class="comment"> */</span></div><div class="line">    allowed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：代码尾部注释不要使用多行注释格式</span></div><div class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">/* somethingElse不应当为null */</span></div></pre></td></tr></table></figure><h4 id="注释声明"><a href="#注释声明" class="headerlink" title="注释声明"></a>注释声明</h4><p>注释有时候也可以用来给一段代码声明额外的信息。这些声明的格式以单个单词大头并紧跟一个冒号。已使用的声明如下。</p><table><thead><tr><th>标记</th><th>作用</th></tr></thead><tbody><tr><td>TODO</td><td>说明代码还未完成。应当包含下一步要做的事情。</td></tr><tr><td>HACK</td><td>表明代码实现走了一个捷径。应当包含为何使用hack的原因。这也可能表明该问题可能有更好的解决方法。</td></tr><tr><td>XXX</td><td>说明代码是有问题的并应当尽快修复。</td></tr><tr><td>FIXME</td><td>说明代码是有问题的并应尽快修复。重要性略次于XXX</td></tr><tr><td>REVIEW</td><td>说明代码任何可能的改动都需要评审。</td></tr></tbody></table><p>这些声明可能在一行或多行注释中使用，并且应当遵循同一般注释类型相同的格式规范。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> 我希望找到一种更快的方式</span></div><div class="line">doSomething();</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * HACK: 不得不正对IE做的特殊吃力。我计划后续有时间时</span></div><div class="line"><span class="comment"> * 重写这部分。这些代码可能需要在v1.2版本之前替换掉。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="comment">// REVIEW: 有更好的方法？</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：注释声明空格不正确</span></div><div class="line"><span class="comment">// TODO : 我希望找到一种更快的方式</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：代码和注释应当保持同样的缩进</span></div><div class="line">    <span class="comment">// REVIEW: 有更好的方法吗？</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>所有的变量在使用前都应当事先定义。变量定义应当放在函数开头，使用一个var表达式每行一个变量。除了首行，所有行都应当多一层缩进以使变量名能够垂直方向对齐。变量定义是应当初始化，并且赋值操作符应当保持一致的缩进。初始化的变量应当在未初始化之前。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">"Mr.Five"</span>,</div><div class="line">    found = <span class="literal">false</span>,</div><div class="line">    empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法： 不恰当的初始化赋值</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">"Mr.Five"</span>,</div><div class="line">    found= <span class="literal">false</span>,</div><div class="line">    empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：错误的缩进</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">name = <span class="string">"Mr.Five"</span>,</div><div class="line">found = <span class="literal">false</span>,</div><div class="line">empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：多个定义写在一行</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>, name = <span class="string">"Mr.Five"</span>，</div><div class="line">    found = <span class="literal">false</span>, empty;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：未初始化的变量放在最前边</span></div><div class="line"><span class="keyword">var</span> empty,</div><div class="line">    count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">"Mr.Five"</span>,</div><div class="line">    found = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：多个var表达式（这个规范因人而异，可以按变量的作用进行分类）</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">    name = <span class="string">"Mr.Five"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> found = <span class="literal">false</span>,</div><div class="line">    empty;</div></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数应当在使用前提前定义。一个不是作为方法的函数（也就是说没有作为一个对象的属性）应当使用函数定义的格式（不是函数表达式和Function构造器格式）。函数名和开始圆括号之间不应当有空格。结束的圆括号和右边的花括号之间应该留一个空格。右侧的花括号应当同Function关键字保持同一行。开始和结束括号之间不应该有空格。参数名之间应当在都好之后保留一个空格。函数体应当保持一级缩进。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：第一行不恰当的空格</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：函数表达式(不建议使用函数表达式定义函数)</span></div><div class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 + arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：左侧的花括号位置不对(这是C#风格的写法，建议使用java风格写法)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> arg1 +arg2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错误的写法：使用了Function构造器(不建议使用这种方式)</span></div><div class="line"><span class="keyword">var</span> doSomething = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"arg1"</span>, <span class="string">"arg2"</span>, <span class="string">"return arg1 + arg2"</span>);</div></pre></td></tr></table></figure><p>其它函数内部定义的函数应当在var语句后立即定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">        name = <span class="string">"Mr.Five"</span>,</div><div class="line">        found = <span class="literal">false</span>,</div><div class="line">        empty;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//代码</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//调用inner()的代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：inner函数的定义先于变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//代码</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</div><div class="line">        name = <span class="string">"Mr.Five"</span>,</div><div class="line">        found = <span class="literal">false</span>,</div><div class="line">        empty;</div><div class="line">    </div><div class="line">    <span class="comment">//调用inner()的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>匿名函数可能作为方法赋值给对象，或者作为其他函数的参数。function关键字同开始括号之间不应有空格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//好的写法</span></div><div class="line">object.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：不正确的空格</span></div><div class="line">object.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>立即被调用的函数应当在函数调用的外层用圆括号包裹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//好的写法</span></div><div class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//函数体</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        message: <span class="string">"hi"</span></div><div class="line">    &#125;</div><div class="line">&#125; ());</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：函数调用外层没有用圆括号包裹</span></div><div class="line"><span class="keyword">var</span> value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// function body</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        message: <span class="string">"hi"</span></div><div class="line">    &#125;</div><div class="line">&#125; ();</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：圆括号位置不当（这个规范因人而异，实际上并没有什么区别）</span></div><div class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//函数体</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        message: <span class="string">"hi"</span></div><div class="line">    &#125;</div><div class="line">&#125;) ();</div></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>变量和函数在命名时应当小心。命名应仅限于数字字母字符，某些情况下也可以使用下划线。最好不要再任何命名中使用美元符号（$）和反斜杠（\）。</p><p>变量命名应当采用驼峰命名格式，首字母小写，其后每个单词首字母大写。变量名的第一个单词应当是一个名词（而非动词）以避免同函数混淆。不要再变量命名中使用下滑线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> accountNumber = <span class="string">"8401-1"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">var</span> AccountNumber = <span class="string">"8401-1"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：动词开头</span></div><div class="line"><span class="keyword">var</span> getAccountNubber = <span class="string">"8401-1"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用下划线</span></div><div class="line"><span class="keyword">var</span> account_number = <span class="string">"8401-1"</span>;</div></pre></td></tr></table></figure><p>函数命名也应当采用驼峰命名格式。函数名的第一个单词应当是动词（而非名词）来避免同变量混淆。函数名中最好不要使用下划线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：大写字母开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：名词开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">car</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用下划线</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// coed</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> TOTAL_COUNT = <span class="number">10</span>;</div><div class="line">   </div><div class="line"><span class="comment">// 不好的写法：驼峰形式</span></div><div class="line"><span class="keyword">var</span> totalCount = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">//不好的写法：混合形式</span></div><div class="line"><span class="keyword">var</span> total_COUNT = <span class="number">10</span>;</div></pre></td></tr></table></figure><p>对象的属性同变量的命名规则相同。对象的方法同函数的命名规则相同。如果属性或者方法是私有的，应当在之前加一个下划线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//好的写法</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    _count: <span class="number">10</span>,</div><div class="line">    </div><div class="line">    _getCount: function() [</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>严格模式应当仅限在函数内部使用，千万不要在全局使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：全局使用严格模式</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你期望在多个函数中使用严格模式而不需要多次声明“use strict”，可以使用立即被调用的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">&#125; ());</div></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>当给变量赋值时，如果右侧是含有比较语句的表达式，需要用圆括号包裹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> flag = (i &lt; count);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法</span></div><div class="line"><span class="keyword">var</span> flag = i &lt; count;</div></pre></td></tr></table></figure><h3 id="等号运算符"><a href="#等号运算符" class="headerlink" title="等号运算符"></a>等号运算符</h3><p>使用===（严格相等）和！==（严格不相等）待地==（相等）和！=（不等）来避免弱类型转换错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> same = (a === b);</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：使用==</span></div><div class="line"><span class="keyword">var</span> same = (a == b);</div></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符应当仅仅用在条件赋值语句中，而不要作为if语句的替代品。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> value = condition ? value1 : value2;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：没有赋值，应当使用 if 表达式</span></div><div class="line">condition ? doSomething() : doSomethingElse();</div></pre></td></tr></table></figure><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h4><p>没一行最多只包含一条语句。所有的简单的语句都应该以分号（；）结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line">count++;</div><div class="line">a = b;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：多个表达式写在一行</span></div><div class="line">count++; a = b;</div></pre></td></tr></table></figure><h4 id="返回语句"><a href="#返回语句" class="headerlink" title="返回语句"></a>返回语句</h4><p>返回语句当返回一个值得时候不应当使用圆括号包括，除非在某些情况下这么做可以让返回值更容易理解。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> collection.size();</div><div class="line"></div><div class="line"><span class="keyword">return</span> (size &gt; <span class="number">0</span> ? size : defaultSize);</div></pre></td></tr></table></figure><h4 id="符合语句"><a href="#符合语句" class="headerlink" title="符合语句"></a>符合语句</h4><p>符合语句是大括号起来的语句列表。</p><ul><li>括起来的语句应当较符合语句多缩进一个层级。</li><li>开始的大括号应当在符合语句所在行的末尾；结尾的大括号应当独占一行切同符合语句的开始保持同样的缩进。</li><li>当语句是控制结构的一部分是，诸如if或者for语句，所有语句都需要用大括号括起来，也包括单个语句。这个约定使得我们更方便的添加语句而不用担心忘记加括号而引起bug。</li><li>想if一样的语句开始的关键词，其后应该紧跟一个空格，其实大括号应当在空格之后。</li></ul><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>if语句应当是下面的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statements</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>绝不允许在if语句中省略花括号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：不恰当的空格</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：遗漏花括号</span></div><div class="line"><span class="keyword">if</span> (condition)</div><div class="line">    doSomething();</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：所有代码写在一行</span></div><div class="line"><span class="keyword">if</span> (condition) &#123; doSomething(); &#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：所有代码写在一行且没有花括号</span></div><div class="line"><span class="keyword">if</span> (condition) doSomething();</div></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>for类型的语句应当是下面的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>for语句的初始化部分不应当有变量声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">var</span> i,</div><div class="line">    len;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：初始化时候声明变量</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不好的写法：初始化时候声明变量</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> object) &#123;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>单使用for-in语句时，记得使用hasOwnproperty（）进行双重检查来过滤出对象的成员。</p><h4 id="while、do语句"><a href="#while、do语句" class="headerlink" title="while、do语句"></a>while、do语句</h4><p>while类的语句应当是下面的格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (condition) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>do类的语句应当是下面的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">while</span> (condition);</div></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>switch类的语句应当是如下格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (expression) &#123;</div><div class="line">    <span class="keyword">case</span> expression:</div><div class="line">        statements</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        statements</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>switch下的每一个case都应当保持一个缩进。除第一个之外包括default在内的每一个case都应当在之前保持一个空行。每一组语句（出来default）都应当以break、return、throw结尾，或者用一行注释表示跳过。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">switch</span> (value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="comment">/* falls through */</span></div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        doSomething();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this shouldn't happen."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果一个switch语句不包含default情况，应当用一行注释代替。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 好的写法</span></div><div class="line"><span class="keyword">switch</span> (value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="comment">/* falls through */</span></div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        doSomething();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 没有default</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h4><p>try类的语句应当格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="留白"><a href="#留白" class="headerlink" title="留白"></a>留白</h3><p>在逻辑相关的代码块之间添加空行可以提高代码的可读性。</p><p>两行空行仅限在如下情况中使用。</p><ul><li>在不同的源代码文件之间。</li><li>在类和接口定义之间。</li></ul><p>单行空行仅限在如下情况中使用。</p><ul><li>方法之间。</li><li>方法中局部变量和第一行语句之间。</li><li>多行或者当行注释之前。</li><li>方法中逻辑代码块之间以提升代码的可读性。</li></ul><p>空格应当在如下情况中使用。</p><ul><li>关键词后跟括号的情况应当用空格隔开。</li><li>参数列表中逗号之后应当保留一个空格。</li><li>所有的除了点（.）之外的二元运算符，其操作数应当用空格隔开。单目运算符的操作数之间不应该用空白隔开，诸如一元减号，递增（++），递减（–）。</li><li>for语句中的表达式之间应当用空格隔开。</li></ul><h3 id="需要避免的"><a href="#需要避免的" class="headerlink" title="需要避免的"></a>需要避免的</h3><ul><li>切勿使用像String一类的原始包装类型创建新的对象。</li><li>避免使用eval()（避免注入攻击）。</li><li>避免使用with语句。该语句自严格模式下不复存在，可能在未来的ECMAScript标准中将去除</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>也许你会觉得谈这些没有用，还不如花时间多解决一些技术上的问题，但我觉得，代码规范就好比是你的字体，字体龙飞凤舞，你认为你写的东西能给阅读者多少享受？传递多少感情？人不可能脱离群体，编程也可能永远单干，如果你写的代码别人看不懂或者很难看懂，那对于团队合作开发来说那将是怎么样的一个灾难？</p><p>一开始就规范自己的代码，终归是没有错的！（小子以为）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;实习3个月，从代码渣渣到现在的代码还是渣渣，参与了公司实际项目开发，却深受代码不规范的危害。结构混乱，代码藕隅严重，书写格式千奇百怪，开发起
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://blog.minfive.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="代码规范" scheme="http://blog.minfive.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>基于Inline-Block布局+vertical-Align的研究</title>
    <link href="http://blog.minfive.com/2016/03/22/%E5%9F%BA%E4%BA%8EInline-Block%E5%B8%83%E5%B1%80-vertical-Align%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://blog.minfive.com/2016/03/22/基于Inline-Block布局-vertical-Align的研究/</id>
    <published>2016-03-21T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：这个探究主要源于ife任务6的一个布局困扰，继而产生以下这些探究及结论，如解释有误或有新的见解，请及时与我联系，谢谢大家的捧场。</p></blockquote><hr><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>有需求才会有解决方案，那么，这个需求是什么呢？</p><p>这是任务6布局的两个点</p><p><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/issue-01.png" alt="img1"><br><img src="http://oo12ugek5.bkt.clouddn.com/blog/images/issue-02.png" alt="img2"></p><p><code>review</code>了许多同学的代码，实现方式基本局限于两种，<code>position</code>定位、<code>float+内外边距</code>再者就是两者结合，那么又没有第三种更为简单的适合的方法呢？<br>答案是有的，那就是基于<code>inlink-block</code>+<code>vertical-align</code>的方式</p><h3 id="inline-block-vertical-align"><a href="#inline-block-vertical-align" class="headerlink" title="inline-block + vertical-align"></a>inline-block + vertical-align</h3><p>什么是<code>inline-block</code>相信大家比我还要清楚，但用来布局的话还有几个重要的点需要大家着重注意的：</p><blockquote><ul><li>inline-block是行内块级元素，因此这种布局仅适用于单排布局（这点大家应该不会有太多异议吧）</li><li>inline-block布局+vertical-align的关键点在于<code>valign特性</code>的使用，因此对于<code>vertical-align</code>的理解尤为关键（具体可参照<a href="http://www.zhangxinxu.com/wordpress/2010/05/%E6%88%91%E5%AF%B9css-vertical-align%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3%E4%B8%8E%E8%AE%A4%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">张鑫旭大神关于vertical-align的理解</a>）</li></ul></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>基于上述技术，我写了一个新的解决方法，具体如下：</p><p>html代码部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-mark"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>ife.baidu.com<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-date"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2016.03<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure><p>css代码部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*头部*/</span></div><div class="line"><span class="selector-class">.header</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">vertical-align</span>: bottom;</div><div class="line">&#125;</div><div class="line">    <span class="selector-class">.header-mark</span>&#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">width</span>: <span class="number">110px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">61px</span>;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#d45d5c</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.header-mark</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">        <span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">58px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.header-mark</span>&gt;<span class="selector-tag">span</span>&#123;</div><div class="line">        <span class="attribute">vertical-align</span>: bottom;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.header-date</span>&#123;</div><div class="line">        <span class="attribute">float</span>:right;</div><div class="line">        <span class="attribute">height</span>: <span class="number">61px</span>;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#d45d5c</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.header-date</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">        <span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">58px</span>;</div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">0.5em</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.header-date</span>&gt;<span class="selector-tag">span</span>&#123;</div><div class="line">        <span class="attribute">vertical-align</span>: bottom;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>原理其实很简单，利用伪元素去做基准线，然后其它元素以伪元素为基准进行排布，方便快捷，更重要的是这种方式维护起来也跟方便</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>第一次写学习笔记，写的不好的地方请大家多多包涵，也请大家不吝啬给出意见，共同学习，共同进步，谢谢大家！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：这个探究主要源于ife任务6的一个布局困扰，继而产生以下这些探究及结论，如解释有误或有新的见解，请及时与我联系，谢谢大家的捧场。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; cla
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://blog.minfive.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="百度ife" scheme="http://blog.minfive.com/tags/%E7%99%BE%E5%BA%A6ife/"/>
    
  </entry>
  
  <entry>
    <title>关于Javascript正则的&#39;反向引用&#39;</title>
    <link href="http://blog.minfive.com/2016/03/09/%E5%85%B3%E4%BA%8EJavascript%E6%AD%A3%E5%88%99%E7%9A%84&#39;%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8&#39;/"/>
    <id>http://blog.minfive.com/2016/03/09/关于Javascript正则的&#39;反向引用&#39;/</id>
    <published>2016-03-08T16:00:00.000Z</published>
    <updated>2017-10-22T13:27:55.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：一直忙着找实习单位，有几月没有写过博客，也没有学习过，终于找到一个勉强合适的，还是赶紧加油吧，别被别人甩太远了！ 本来是在看着阿树博客里的jQuery规范的，不知道怎么搞得，稀里糊涂的就看到正则去了，把学到的东西总结一下。</p></blockquote><hr><h3 id="首先先看下面这个例子："><a href="#首先先看下面这个例子：" class="headerlink" title="首先先看下面这个例子："></a>首先先看下面这个例子：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"abcd"</span>.match(<span class="regexp">/(a(bc)d)/</span>);</div><div class="line"><span class="comment">//result: ["abcd", "abcd", "bc"]</span></div></pre></td></tr></table></figure><p>这个例子说明看括号匹配顺序是按<strong>左括号</strong>计算的。（这是别人的理解，我的理解是匹配顺序是按<strong>从外到里从左到右</strong>计算的，每个反向引用都由一个编号或名称来标识，并通过“\编号”表示法进行引用，外面的组的编号靠前。也就是说引用分组是编号排列是<strong>从外到内</strong>编排。）</p><h3 id="再看这个例子"><a href="#再看这个例子" class="headerlink" title="再看这个例子"></a>再看这个例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'aaa'</span>.match(<span class="regexp">/(a\1)/</span>);</div><div class="line"><span class="comment">//result: ['a']  </span></div><div class="line"><span class="string">'aaaaaaa'</span>.match(<span class="regexp">/(a\1\1\1\1\1)/</span>);  </div><div class="line"><span class="comment">//result: ['a']</span></div></pre></td></tr></table></figure><p>由这个例子可以看出<code>/(a\1)/</code>在第一个括号中使用<code>\1</code>引用是没有意义的，同时在chrome中的测试结果表明，无论在第n个括号中有几个<code>\n</code>都会被忽略。（既从最外层括号往里层数）</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>基于上述两个例子的解读，咱们可以把下边的例子进行转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/[abc]\1/g</span>);<span class="comment">//null  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/([abc])\1/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/(([abc])\1)\1/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/(([abc])\1)\2/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/((([abc])\1)\2)\3/g</span>);<span class="comment">//["aaa", "bbb", "ccc"]</span></div></pre></td></tr></table></figure><p>可简化为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/[abc]\1/g</span>);<span class="comment">//null  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/([abc])\1/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/(([abc]))\1/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/(([abc]))\2/g</span>);<span class="comment">//["aa", "bb", "cc"]  </span></div><div class="line"><span class="string">'aaabbbcccdddeeefff'</span>.match(<span class="regexp">/((([abc]))\2)\3/g</span>);<span class="comment">//["aaa", "bbb", "ccc"]</span></div></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://segmentfault.com/q/1010000000580762" target="_blank" rel="external">如何理解javascript正则“反向引用”</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：一直忙着找实习单位，有几月没有写过博客，也没有学习过，终于找到一个勉强合适的，还是赶紧加油吧，别被别人甩太远了！ 本来是在看着阿树博客里的jQuery规范的，不知道怎么搞得，稀里糊涂的就看到正则去了，把学到的东西总结一下。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="日常学习" scheme="http://blog.minfive.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://blog.minfive.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="javascript" scheme="http://blog.minfive.com/tags/javascript/"/>
    
  </entry>
  
</feed>
